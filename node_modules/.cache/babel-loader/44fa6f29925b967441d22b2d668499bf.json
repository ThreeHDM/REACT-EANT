{"ast":null,"code":"/*\nHelpers\n-------\nTiene una estructura similar a un componente\n\nPuedo crear un helper con funciones o con clases\n\n*/\nclass AJAX {\n  //método de instancia - le agrego el flag async para usar async/await\n  async getData(url) {\n    /*\n    //Retornamos un objeto promise al usar fetch\n    return fetch(url).then(rta => rta.json())\n    */\n    //creo dos variables en la misma linea\n    let data,\n        objects = null;\n\n    if (!localStorage.getItem(\"PRODUCTOS\")) {\n      //El flag await aguarda que se resuelva la funcion asyncronica\n      data = await fetch(url);\n      objects = await data.json(); //ponemos el await pues el dato que recibe es async\n\n      localStorage.setItem(\"PRODUCTOS\", JSON.stringify(objects));\n    } else {\n      data = localStorage.getItem(\"PRODUCTOS\");\n      objects = JSON.parse(data);\n    }\n\n    return objects;\n  }\n\n} //Para poder utilizarlo en los componentes lo exporto\n\n\nexport default AJAX;","map":{"version":3,"sources":["/opt/lampp/htdocs/_desarrollos/REACT-EANT/src/helpers/AJAX.js"],"names":["AJAX","getData","url","data","objects","localStorage","getItem","fetch","json","setItem","JSON","stringify","parse"],"mappings":"AAAA;;;;;;;;AASA,MAAMA,IAAN,CAAW;AAGP;AACA,QAAMC,OAAN,CAAcC,GAAd,EAAkB;AACd;;;;AAKA;AACA,QAAIC,IAAJ;AAAA,QAAUC,OAAO,GAAG,IAApB;;AAEA,QAAG,CAACC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAJ,EACA;AACI;AACAH,MAAAA,IAAI,GAAG,MAAMI,KAAK,CAACL,GAAD,CAAlB;AACAE,MAAAA,OAAO,GAAG,MAAMD,IAAI,CAACK,IAAL,EAAhB,CAHJ,CAII;;AACAH,MAAAA,YAAY,CAACI,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeP,OAAf,CAAlC;AACH,KAPD,MAOO;AACHD,MAAAA,IAAI,GAAGE,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAP;AACAF,MAAAA,OAAO,GAAGM,IAAI,CAACE,KAAL,CAAWT,IAAX,CAAV;AACH;;AAED,WAAOC,OAAP;AAEH;;AA3BM,C,CA8BX;;;AACA,eAAeJ,IAAf","sourcesContent":["/*\nHelpers\n-------\nTiene una estructura similar a un componente\n\nPuedo crear un helper con funciones o con clases\n\n*/\n\nclass AJAX {\n\n\n    //método de instancia - le agrego el flag async para usar async/await\n    async getData(url){\n        /*\n        //Retornamos un objeto promise al usar fetch\n        return fetch(url).then(rta => rta.json())\n        */\n\n        //creo dos variables en la misma linea\n        let data, objects = null\n\n        if(!localStorage.getItem(\"PRODUCTOS\"))\n        {\n            //El flag await aguarda que se resuelva la funcion asyncronica\n            data = await fetch(url)\n            objects = await data.json()\n            //ponemos el await pues el dato que recibe es async\n            localStorage.setItem(\"PRODUCTOS\", JSON.stringify(objects))\n        } else {\n            data = localStorage.getItem(\"PRODUCTOS\")\n            objects = JSON.parse(data) \n        }\n\n        return objects;\n\n    }\n}\n\n//Para poder utilizarlo en los componentes lo exporto\nexport default AJAX"]},"metadata":{},"sourceType":"module"}