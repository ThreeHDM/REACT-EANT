{"ast":null,"code":"import _defineProperty from \"/opt/lampp/htdocs/_desarrollos/REACT-EANT/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/opt/lampp/htdocs/_desarrollos/REACT-EANT/src/components/Producto/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\n\nclass Producto extends React.Component {\n  constructor() {\n    super(); //En el estado agrego las propiedades del componente porque eso me permite controlar los cambios en el render. Si el estado cambia, el render también. Punto de conexión entre datos e interfaz\n\n    this.state = {\n      isLoaded: false // no está cargado. No hay datos\n\n    };\n  }\n\n  componentDidMount() {\n    //Aquí se setea todo lo que tiene que ver con el state\n    this.setState(_objectSpread({}, this.props.datos, {\n      isLoaded: true\n    }));\n    /*\n    setTimeout(()=>{\n        alert(\"Ya tenemos los datos\")\n        //para actualizar el state se usa un metodo setter \n        this.setState({ isLoaded : true })\n    },10000)\n    */\n    //Petición AJAX que trae datos de API\n\n    /*\n    fetch(\"https://api.myjson.com/bins/1giaf3\").then(rta =>{\n             let datos = rta.json()\n         //una vez obtenida la respuesta puedo usar un then aninado\n        datos.then(productos => {\n                  productos[0].precio *= 69 \n        \n            //Destructuring\n            //toma los valores del objeto que recibo. Construyo un objeto con las propiedades de otro objeto usando los ... \n            this.setState({ ...productos[0], isLoaded : true})\n        })\n        \n        \n    }) */\n  }\n  /*\n  //El uso de este método está prohibido en nuevas versiones de react\n      componentWillMount(){\n      }\n  */\n\n\n  render() {\n    // se re-ejecuta cada vez que se ejecuta primero el setState\n    if (!this.state.isLoaded) {\n      return React.createElement(\"em\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"cite\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Tengo los datos de producto \", this.state.nombre, \" y valgo ARS $\", this.state.precio, \" \");\n    }\n  }\n\n}\n\nexport default Producto;","map":{"version":3,"sources":["/opt/lampp/htdocs/_desarrollos/REACT-EANT/src/components/Producto/index.js"],"names":["React","Producto","Component","constructor","state","isLoaded","componentDidMount","setState","props","datos","render","nombre","precio"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA,MAAMC,QAAN,SAAuBD,KAAK,CAACE,SAA7B,CAAuC;AAEnCC,EAAAA,WAAW,GAAE;AACT,YADS,CAET;;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAG,KADF,CACQ;;AADR,KAAb;AAGH;;AAGDC,EAAAA,iBAAiB,GAAE;AACf;AAEA,SAAKC,QAAL,mBAAkB,KAAKC,KAAL,CAAWC,KAA7B;AAAoCJ,MAAAA,QAAQ,EAAG;AAA/C;AAGA;;;;;;;AAQA;;AACA;;;;;;;;;;;;;;AAkBH;AACL;;;;;;;AAQIK,EAAAA,MAAM,GAAE;AAAE;AAEN,QAAG,CAAC,KAAKN,KAAL,CAAWC,QAAf,EAAwB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,KAFD,MAEO;AACH,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAmC,KAAKD,KAAL,CAAWO,MAA9C,oBAAoE,KAAKP,KAAL,CAAWQ,MAA/E,MAAP;AACH;AACJ;;AA5DkC;;AA+DvC,eAAeX,QAAf","sourcesContent":["import React from 'react';\n\n\n\nclass Producto extends React.Component {\n    \n    constructor(){\n        super();\n        //En el estado agrego las propiedades del componente porque eso me permite controlar los cambios en el render. Si el estado cambia, el render también. Punto de conexión entre datos e interfaz\n        this.state = {\n            isLoaded : false // no está cargado. No hay datos\n        }\n    }\n\n    \n    componentDidMount(){\n        //Aquí se setea todo lo que tiene que ver con el state\n        \n        this.setState({...this.props.datos, isLoaded : true})\n\n\n        /*\n        setTimeout(()=>{\n            alert(\"Ya tenemos los datos\")\n            //para actualizar el state se usa un metodo setter \n            this.setState({ isLoaded : true })\n        },10000)\n        */ \n    \n        //Petición AJAX que trae datos de API\n        /*\n        fetch(\"https://api.myjson.com/bins/1giaf3\").then(rta =>{\n    \n            let datos = rta.json()\n\n            //una vez obtenida la respuesta puedo usar un then aninado\n            datos.then(productos => {\n    \n\n                productos[0].precio *= 69 \n            \n                //Destructuring\n                //toma los valores del objeto que recibo. Construyo un objeto con las propiedades de otro objeto usando los ... \n                this.setState({ ...productos[0], isLoaded : true})\n            })\n            \n            \n        }) */\n    }\n/*\n//El uso de este método está prohibido en nuevas versiones de react\n    componentWillMount(){\n    }\n*/\n    \n    \n    \n    render(){ // se re-ejecuta cada vez que se ejecuta primero el setState\n        \n        if(!this.state.isLoaded){\n            return <em>Loading...</em>;\n        } else {\n            return <cite>Tengo los datos de producto {this.state.nombre} y valgo ARS ${this.state.precio} </cite>;\n        }\n    }\n}\n\nexport default Producto;"]},"metadata":{},"sourceType":"module"}